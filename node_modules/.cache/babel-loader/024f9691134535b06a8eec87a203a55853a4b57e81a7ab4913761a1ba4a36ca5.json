{"ast":null,"code":"var _jsxFileName = \"/Users/kelvin/Workspace/CS180/proj2/proj2_website/proj2/src/components/Section.js\";\nimport React from 'react';\nimport ImageCard from './ImageCard';\nimport ImageGrid from './ImageGrid';\nimport 'katex/dist/katex.min.css';\nimport Latex from 'react-latex-next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Section({\n  id,\n  title,\n  content\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    className: \"mb-16\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-6\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: content.map((item, index) => {\n        if (item.type === 'paragraph') {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg text-gray-400 leading-relaxed break-words\",\n            children: item.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 15\n          }, this);\n        }\n        if (item.type === 'math') {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center text-2xl text-gray-300 break-words leading-relaxed\",\n            children: /*#__PURE__*/_jsxDEV(Latex, {\n              children: item.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }, this);\n        }\n        if (item.type === 'image-grid') {\n          return /*#__PURE__*/_jsxDEV(ImageGrid, {\n            columns: item.columns,\n            children: item.images.map((image, imgIndex) => /*#__PURE__*/_jsxDEV(ImageCard, {\n              title: image.title,\n              imageUrl: image.imageUrl\n            }, imgIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 19\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this);\n        }\n        if (item.type === 'subsection') {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-2xl font-semibold mb-4\",\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: item.content.map((subItem, subIndex) => {\n                if (subItem.type === 'paragraph') {\n                  return /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-lg text-gray-400 leading-relaxed break-words\",\n                    children: subItem.text\n                  }, subIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 45,\n                    columnNumber: 25\n                  }, this);\n                }\n                if (subItem.type === 'math') {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-center text-2xl text-gray-300 break-words leading-relaxed\",\n                    children: /*#__PURE__*/_jsxDEV(Latex, {\n                      children: subItem.text\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 53,\n                      columnNumber: 27\n                    }, this)\n                  }, subIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 25\n                  }, this);\n                }\n                if (subItem.type === 'image-grid') {\n                  return /*#__PURE__*/_jsxDEV(ImageGrid, {\n                    columns: subItem.columns,\n                    children: subItem.images.map((image, subImgIndex) => /*#__PURE__*/_jsxDEV(ImageCard, {\n                      title: image.title,\n                      imageUrl: image.imageUrl\n                    }, subImgIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 29\n                    }, this))\n                  }, subIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 25\n                  }, this);\n                }\n                return null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_c = Section;\nexport default Section;\nvar _c;\n$RefreshReg$(_c, \"Section\");","map":{"version":3,"names":["React","ImageCard","ImageGrid","Latex","jsxDEV","_jsxDEV","Section","id","title","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","type","text","columns","images","image","imgIndex","imageUrl","subItem","subIndex","subImgIndex","_c","$RefreshReg$"],"sources":["/Users/kelvin/Workspace/CS180/proj2/proj2_website/proj2/src/components/Section.js"],"sourcesContent":["import React from 'react';\nimport ImageCard from './ImageCard';\nimport ImageGrid from './ImageGrid';\nimport 'katex/dist/katex.min.css';\nimport Latex from 'react-latex-next';\n\nfunction Section({ id, title, content }) {\n  return (\n    <div id={id} className=\"mb-16\">\n      <h2 className=\"text-3xl font-bold mb-6\">{title}</h2>\n\n      <div className=\"space-y-6\">\n        {content.map((item, index) => {\n          if (item.type === 'paragraph') {\n            return (\n              <p key={index} className=\"text-lg text-gray-400 leading-relaxed break-words\">\n                {item.text}\n              </p>\n            );\n          }\n          if (item.type === 'math') {\n            return (\n              <div key={index} className=\"text-center text-2xl text-gray-300 break-words leading-relaxed\">\n                <Latex>{item.text}</Latex>\n              </div>\n            );\n          }\n          if (item.type === 'image-grid') {\n            return (\n              <ImageGrid key={index} columns={item.columns}>\n                {item.images.map((image, imgIndex) => (\n                  <ImageCard key={imgIndex} title={image.title} imageUrl={image.imageUrl} />\n                ))}\n              </ImageGrid>\n            );\n          }\n          if (item.type === 'subsection') {\n            return (\n              <div key={index} className=\"mb-8\">\n                <h3 className=\"text-2xl font-semibold mb-4\">{item.title}</h3>\n                <div className=\"space-y-4\">\n                  {item.content.map((subItem, subIndex) => {\n                    if (subItem.type === 'paragraph') {\n                      return (\n                        <p key={subIndex} className=\"text-lg text-gray-400 leading-relaxed break-words\">\n                          {subItem.text}\n                        </p>\n                      );\n                    }\n                    if (subItem.type === 'math') {\n                      return (\n                        <div key={subIndex} className=\"text-center text-2xl text-gray-300 break-words leading-relaxed\">\n                          <Latex>{subItem.text}</Latex>\n                        </div>\n                      );\n                    }\n                    if (subItem.type === 'image-grid') {\n                      return (\n                        <ImageGrid key={subIndex} columns={subItem.columns}>\n                          {subItem.images.map((image, subImgIndex) => (\n                            <ImageCard key={subImgIndex} title={image.title} imageUrl={image.imageUrl} />\n                          ))}\n                        </ImageGrid>\n                      );\n                    }\n                    return null;\n                  })}\n                </div>\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Section;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}