{"ast":null,"code":"var _jsxFileName = \"/Users/kelvin/Workspace/CS180/proj2/proj2_website/proj2/src/components/ImageGrid.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageGrid({\n  children,\n  columns\n}) {\n  const columnsClassMap = {\n    1: 'grid-cols-1',\n    2: 'grid-cols-2',\n    3: 'grid-cols-3',\n    4: 'grid-cols-4',\n    5: 'grid-cols-5',\n    6: 'grid-cols-6'\n  };\n  const columnsClass = columnsClassMap[columns] || 'grid-cols-1';\n\n  // Check if there's only one image\n  const isSingleImage = React.Children.count(children) === 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `grid ${isSingleImage ? 'place-items-center' : columnsClass} gap-4 w-full`,\n    children: React.Children.map(children, child => {\n      // Apply special styles for the single image\n      const style = isSingleImage ? {\n        width: '75vw',\n        height: '75vw',\n        maxWidth: '600px',\n        maxHeight: '600px'\n      } // Square image when there's only one\n      : {};\n\n      // Pass style prop to ImageCard\n      return /*#__PURE__*/React.cloneElement(child, {\n        style\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_c = ImageGrid;\nexport default ImageGrid;\nvar _c;\n$RefreshReg$(_c, \"ImageGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ImageGrid","children","columns","columnsClassMap","columnsClass","isSingleImage","Children","count","className","map","child","style","width","height","maxWidth","maxHeight","cloneElement","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kelvin/Workspace/CS180/proj2/proj2_website/proj2/src/components/ImageGrid.js"],"sourcesContent":["import React from 'react';\n\nfunction ImageGrid({ children, columns }) {\n  const columnsClassMap = {\n    1: 'grid-cols-1',\n    2: 'grid-cols-2',\n    3: 'grid-cols-3',\n    4: 'grid-cols-4',\n    5: 'grid-cols-5',\n    6: 'grid-cols-6',\n  };\n\n  const columnsClass = columnsClassMap[columns] || 'grid-cols-1';\n\n  // Check if there's only one image\n  const isSingleImage = React.Children.count(children) === 1;\n\n  return (\n    <div className={`grid ${isSingleImage ? 'place-items-center' : columnsClass} gap-4 w-full`}>\n      {React.Children.map(children, (child) => {\n        // Apply special styles for the single image\n        const style = isSingleImage\n          ? { width: '75vw', height: '75vw', maxWidth: '600px', maxHeight: '600px' } // Square image when there's only one\n          : {};\n\n        // Pass style prop to ImageCard\n        return React.cloneElement(child, { style });\n      })}\n    </div>\n  );\n}\n\nexport default ImageGrid;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,EAAE;EACxC,MAAMC,eAAe,GAAG;IACtB,CAAC,EAAE,aAAa;IAChB,CAAC,EAAE,aAAa;IAChB,CAAC,EAAE,aAAa;IAChB,CAAC,EAAE,aAAa;IAChB,CAAC,EAAE,aAAa;IAChB,CAAC,EAAE;EACL,CAAC;EAED,MAAMC,YAAY,GAAGD,eAAe,CAACD,OAAO,CAAC,IAAI,aAAa;;EAE9D;EACA,MAAMG,aAAa,GAAGR,KAAK,CAACS,QAAQ,CAACC,KAAK,CAACN,QAAQ,CAAC,KAAK,CAAC;EAE1D,oBACEF,OAAA;IAAKS,SAAS,EAAE,QAAQH,aAAa,GAAG,oBAAoB,GAAGD,YAAY,eAAgB;IAAAH,QAAA,EACxFJ,KAAK,CAACS,QAAQ,CAACG,GAAG,CAACR,QAAQ,EAAGS,KAAK,IAAK;MACvC;MACA,MAAMC,KAAK,GAAGN,aAAa,GACvB;QAAEO,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,MAAM;QAAEC,QAAQ,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAQ,CAAC,CAAC;MAAA,EACzE,CAAC,CAAC;;MAEN;MACA,oBAAOlB,KAAK,CAACmB,YAAY,CAACN,KAAK,EAAE;QAAEC;MAAM,CAAC,CAAC;IAC7C,CAAC;EAAC;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GA5BQrB,SAAS;AA8BlB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}