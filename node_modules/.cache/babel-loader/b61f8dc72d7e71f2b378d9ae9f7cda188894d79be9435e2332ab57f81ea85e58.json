{"ast":null,"code":"var _jsxFileName = \"/Users/kelvin/Workspace/CS180/proj2/proj2_website/proj2/src/App.js\";\nimport React from 'react';\nimport Navbar from './components/Navbar';\nimport Section from './components/Section';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const parentSections = [{\n    id: 'edge-section',\n    title: 'Edge Detection',\n    sections: [{\n      id: 'edge-detector',\n      title: 'Derivatives and Gradient',\n      content: [{\n        type: 'paragraph',\n        text: 'Inspired by the partial derivative, the finite difference filters represent the respective partial derivatives in the x and y directions. These filters can be convolved with an input image to obtain edges. Convolving an image with the Dx filter will highlight vertical edges, while convolving with the Dy filter will highlight horizontal edges.'\n      }, {\n        type: 'math',\n        text: '\\\\( \\\\frac{\\\\partial f}{\\\\partial x} = \\\\lim_{h \\\\to 0} \\\\frac{f(x+h) - f(x)}{h}, \\\\quad \\\\frac{\\\\partial f}{\\\\partial y} = \\\\lim_{h \\\\to 0} \\\\frac{f(y+h) - f(y)}{h} \\\\)'\n      }, {\n        type: 'math',\n        text: '\\\\( D_x = \\\\begin{bmatrix} 1 & -1 \\\\end{bmatrix}, \\\\quad D_y = \\\\begin{bmatrix} 1 \\\\\\\\ -1 \\\\end{bmatrix} \\\\)'\n      }, {\n        type: 'paragraph',\n        text: 'The gradient magnitude can be computed element-wise from the images filtered by Dx and Dy.'\n      }, {\n        type: 'math',\n        text: '\\\\( \\\\text{Gradient Magnitude} = \\\\sqrt{\\\\left( \\\\frac{\\\\partial f}{\\\\partial x} \\\\right)^2 + \\\\left( \\\\frac{\\\\partial f}{\\\\partial y} \\\\right)^2} \\\\)'\n      }, {\n        type: 'paragraph',\n        text: 'After obtaining the Dx-filtered, Dy-filtered, and gradient magnitude images, we can binarize them using an appropriate threshold to get a clearer edge image.'\n      }, {\n        type: 'image-grid',\n        columns: 4,\n        images: [{\n          title: 'Original',\n          imageUrl: '/images/cameraman.png'\n        }, {\n          title: 'Dx',\n          imageUrl: '/images/binary_dx_edges.png'\n        }, {\n          title: 'Dy',\n          imageUrl: '/images/binary_dy_edges.png'\n        }, {\n          title: 'Gradient Magnitude',\n          imageUrl: '/images/binary_gradient_magnitude.png'\n        }]\n      }]\n    }, {\n      id: 'image-sharpening',\n      title: 'Image Sharpening',\n      content: [{\n        type: 'paragraph',\n        text: 'Description of image sharpening...'\n      }, {\n        type: 'image-grid',\n        columns: 4,\n        images: [{\n          title: 'Sharpened',\n          imageUrl: '/images/sharpened.png'\n        }]\n      }]\n    }]\n  }, {\n    id: 'hybrid-blending',\n    title: 'Hybrid Images and Blending',\n    sections: [{\n      id: 'hybrid-images',\n      title: 'Hybrid Images',\n      content: [{\n        type: 'paragraph',\n        text: 'Description of hybrid images...'\n      }, {\n        type: 'image-grid',\n        columns: 4,\n        images: [{\n          title: 'Hybrid',\n          imageUrl: '/images/hybrid.png'\n        }]\n      }]\n    }, {\n      id: 'image-blending',\n      title: 'Image Blending',\n      content: [{\n        type: 'paragraph',\n        text: 'Description of image blending...'\n      }, {\n        type: 'image-grid',\n        columns: 4,\n        images: [{\n          title: 'Blended',\n          imageUrl: '/images/blended.png'\n        }]\n      }]\n    }]\n  }];\n  const sections = [{\n    id: 'edge-detector',\n    title: 'Edge Detection',\n    content: [{\n      type: 'paragraph',\n      text: 'Inspired by the partial derivative, the finite difference filters represent the respective partial derivatives in the x and y directions. These filters can be convolved with an input image to obtain edges. Convolving an image with the Dx filter will highlight vertical edges, while convolving with the Dy filter will highlight horizontal edges.'\n    }, {\n      type: 'math',\n      text: '\\\\( \\\\frac{\\\\partial f}{\\\\partial x} = \\\\lim_{h \\\\to 0} \\\\frac{f(x+h) - f(x)}{h}, \\\\quad \\\\frac{\\\\partial f}{\\\\partial y} = \\\\lim_{h \\\\to 0} \\\\frac{f(y+h) - f(y)}{h} \\\\)'\n    }, {\n      type: 'math',\n      text: '\\\\( D_x = \\\\begin{bmatrix} 1 & -1 \\\\end{bmatrix}, \\\\quad D_y = \\\\begin{bmatrix} 1 \\\\\\\\ -1 \\\\end{bmatrix} \\\\)'\n    }, {\n      type: 'paragraph',\n      text: 'The gradient magnitude can be computed element-wise from the images filtered by Dx and Dy.'\n    }, {\n      type: 'math',\n      text: '\\\\( \\\\text{Gradient Magnitude} = \\\\sqrt{\\\\left( \\\\frac{\\\\partial f}{\\\\partial x} \\\\right)^2 + \\\\left( \\\\frac{\\\\partial f}{\\\\partial y} \\\\right)^2} \\\\)'\n    }, {\n      type: 'paragraph',\n      text: 'After obtaining the Dx-filtered, Dy-filtered, and gradient magnitude images, we can binarize them using an appropriate threshold to get a clearer edge image.'\n    }, {\n      type: 'image-grid',\n      columns: 4,\n      images: [{\n        title: 'Original',\n        imageUrl: '/images/cameraman.png'\n      }, {\n        title: 'Dx',\n        imageUrl: '/images/binary_dx_edges.png'\n      }, {\n        title: 'Dy',\n        imageUrl: '/images/binary_dy_edges.png'\n      }, {\n        title: 'Gradient Magnitude',\n        imageUrl: '/images/binary_gradient_magnitude.png'\n      }]\n    }]\n  }\n  // Other sections...\n  ];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex min-h-screen bg-gradient-to-r from-gray-900 via-gray-800 to-black text-gray-300\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 px-4 lg:px-8 py-8 ml-64 w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-4xl font-bold text-center mb-12 text-white\",\n        children: \"Image Filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), sections.map(section => /*#__PURE__*/_jsxDEV(Section, {\n        id: section.id,\n        title: section.title,\n        content: section.content\n      }, section.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Navbar","Section","jsxDEV","_jsxDEV","App","parentSections","id","title","sections","content","type","text","columns","images","imageUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","section","_c","$RefreshReg$"],"sources":["/Users/kelvin/Workspace/CS180/proj2/proj2_website/proj2/src/App.js"],"sourcesContent":["import React from 'react';\nimport Navbar from './components/Navbar';\nimport Section from './components/Section';\n\nfunction App() {\n  const parentSections = [\n    {\n      id: 'edge-section',\n      title: 'Edge Detection',\n      sections: [\n        {\n          id: 'edge-detector',\n          title: 'Derivatives and Gradient',\n          content: [\n            { type: 'paragraph', text: 'Inspired by the partial derivative, the finite difference filters represent the respective partial derivatives in the x and y directions. These filters can be convolved with an input image to obtain edges. Convolving an image with the Dx filter will highlight vertical edges, while convolving with the Dy filter will highlight horizontal edges.' },\n            { type: 'math', text: '\\\\( \\\\frac{\\\\partial f}{\\\\partial x} = \\\\lim_{h \\\\to 0} \\\\frac{f(x+h) - f(x)}{h}, \\\\quad \\\\frac{\\\\partial f}{\\\\partial y} = \\\\lim_{h \\\\to 0} \\\\frac{f(y+h) - f(y)}{h} \\\\)' },\n            { type: 'math', text: '\\\\( D_x = \\\\begin{bmatrix} 1 & -1 \\\\end{bmatrix}, \\\\quad D_y = \\\\begin{bmatrix} 1 \\\\\\\\ -1 \\\\end{bmatrix} \\\\)' },\n            { type: 'paragraph', text: 'The gradient magnitude can be computed element-wise from the images filtered by Dx and Dy.' },\n            { type: 'math', text: '\\\\( \\\\text{Gradient Magnitude} = \\\\sqrt{\\\\left( \\\\frac{\\\\partial f}{\\\\partial x} \\\\right)^2 + \\\\left( \\\\frac{\\\\partial f}{\\\\partial y} \\\\right)^2} \\\\)' },\n            { type: 'paragraph', text: 'After obtaining the Dx-filtered, Dy-filtered, and gradient magnitude images, we can binarize them using an appropriate threshold to get a clearer edge image.' },\n            {\n              type: 'image-grid',\n              columns: 4,\n              images: [\n                { title: 'Original', imageUrl: '/images/cameraman.png' },\n                { title: 'Dx', imageUrl: '/images/binary_dx_edges.png' },\n                { title: 'Dy', imageUrl: '/images/binary_dy_edges.png' },\n                { title: 'Gradient Magnitude', imageUrl: '/images/binary_gradient_magnitude.png' },\n              ],\n            },\n          ],\n        },\n        {\n          id: 'image-sharpening',\n          title: 'Image Sharpening',\n          content: [\n            { type: 'paragraph', text: 'Description of image sharpening...' },\n            { type: 'image-grid', columns: 4, images: [{ title: 'Sharpened', imageUrl: '/images/sharpened.png' }] },\n          ],\n        },\n      ],\n    },\n    {\n      id: 'hybrid-blending',\n      title: 'Hybrid Images and Blending',\n      sections: [\n        {\n          id: 'hybrid-images',\n          title: 'Hybrid Images',\n          content: [\n            { type: 'paragraph', text: 'Description of hybrid images...' },\n            { type: 'image-grid', columns: 4, images: [{ title: 'Hybrid', imageUrl: '/images/hybrid.png' }] },\n          ],\n        },\n        {\n          id: 'image-blending',\n          title: 'Image Blending',\n          content: [\n            { type: 'paragraph', text: 'Description of image blending...' },\n            { type: 'image-grid', columns: 4, images: [{ title: 'Blended', imageUrl: '/images/blended.png' }] },\n          ],\n        },\n      ],\n    },\n  ];\n  const sections = [\n    {\n      id: 'edge-detector',\n      title: 'Edge Detection',\n      content: [\n        { type: 'paragraph', text: 'Inspired by the partial derivative, the finite difference filters represent the respective partial derivatives in the x and y directions. These filters can be convolved with an input image to obtain edges. Convolving an image with the Dx filter will highlight vertical edges, while convolving with the Dy filter will highlight horizontal edges.' },\n        { type: 'math', text: '\\\\( \\\\frac{\\\\partial f}{\\\\partial x} = \\\\lim_{h \\\\to 0} \\\\frac{f(x+h) - f(x)}{h}, \\\\quad \\\\frac{\\\\partial f}{\\\\partial y} = \\\\lim_{h \\\\to 0} \\\\frac{f(y+h) - f(y)}{h} \\\\)' },\n        { type: 'math', text: '\\\\( D_x = \\\\begin{bmatrix} 1 & -1 \\\\end{bmatrix}, \\\\quad D_y = \\\\begin{bmatrix} 1 \\\\\\\\ -1 \\\\end{bmatrix} \\\\)' },\n        { type: 'paragraph', text: 'The gradient magnitude can be computed element-wise from the images filtered by Dx and Dy.' },\n        { type: 'math', text: '\\\\( \\\\text{Gradient Magnitude} = \\\\sqrt{\\\\left( \\\\frac{\\\\partial f}{\\\\partial x} \\\\right)^2 + \\\\left( \\\\frac{\\\\partial f}{\\\\partial y} \\\\right)^2} \\\\)' },\n        { type: 'paragraph', text: 'After obtaining the Dx-filtered, Dy-filtered, and gradient magnitude images, we can binarize them using an appropriate threshold to get a clearer edge image.' },\n        {\n          type: 'image-grid',\n          columns: 4,\n          images: [\n            { title: 'Original', imageUrl: '/images/cameraman.png' },\n            { title: 'Dx', imageUrl: '/images/binary_dx_edges.png' },\n            { title: 'Dy', imageUrl: '/images/binary_dy_edges.png' },\n            { title: 'Gradient Magnitude', imageUrl: '/images/binary_gradient_magnitude.png' },\n          ],\n        },\n      ],\n    },\n    // Other sections...\n  ];\n\n  return (\n    <div className=\"flex min-h-screen bg-gradient-to-r from-gray-900 via-gray-800 to-black text-gray-300\">\n      <Navbar />\n      <div className=\"flex-1 px-4 lg:px-8 py-8 ml-64 w-full\"> {/* Adjusted padding and width */}\n        <h1 className=\"text-4xl font-bold text-center mb-12 text-white\">Image Filters</h1>\n\n        {sections.map((section) => (\n          <Section\n            key={section.id}\n            id={section.id}\n            title={section.title}\n            content={section.content}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}